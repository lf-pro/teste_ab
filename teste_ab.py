import streamlit as st
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt

# Configura√ß√£o da interface
st.set_page_config(page_title="An√°lise Bayesiana de Teste A/B", layout="centered")
st.title("üìä An√°lise Bayesiana de Teste A/B")
st.write("Este aplicativo calcula a probabilidade de uma varia√ß√£o ser melhor que o controle com um modelo Bayesiano.")

# Layout em colunas para separar os grupos
col1, col2 = st.columns(2)

with col1:
    st.header("üéØ Grupo Controle")
    sessions_control = st.number_input("Sess√µes (Controle)", min_value=1, value=14403)
    revenue_control = st.number_input("Receita Total (Controle)", min_value=0.01, value=803801.41)
    rpv_control_manual = st.number_input("RPV (Receita por Visita - Controle)", min_value=0.01, value=revenue_control / sessions_control)

with col2:
    st.header("üöÄ Grupo Varia√ß√£o")
    sessions_variation = st.number_input("Sess√µes (Varia√ß√£o)", min_value=1, value=13913)
    revenue_variation = st.number_input("Receita Total (Varia√ß√£o)", min_value=0.01, value=838703.13)
    rpv_variation_manual = st.number_input("RPV (Receita por Visita - Varia√ß√£o)", min_value=0.01, value=revenue_variation / sessions_variation)

# Determinar qual RPV usar (manual ou calculado)
rpv_control = rpv_control_manual if rpv_control_manual > 0 else revenue_control / sessions_control
rpv_variation = rpv_variation_manual if rpv_variation_manual > 0 else revenue_variation / sessions_variation

# C√°lculo do desvio padr√£o estimado
std_control = rpv_control / np.sqrt(sessions_control)
std_variation = rpv_variation / np.sqrt(sessions_variation)

# Simula√ß√£o Bayesiana
np.random.seed(42)
samples_control = np.random.normal(rpv_control, std_control, 100000)
samples_variation = np.random.normal(rpv_variation, std_variation, 100000)

# Probabilidade de a varia√ß√£o ser melhor
prob_variation_better = np.mean(samples_variation > samples_control)

# Explica√ß√£o do resultado
if prob_variation_better > 0.95:
    explanation = "üéâ A varia√ß√£o tem uma **alta chance** de ser melhor que o controle! Voc√™ pode considerar implement√°-la."
elif prob_variation_better > 0.75:
    explanation = "‚úÖ A varia√ß√£o tem uma **boa chance** de ser melhor que o controle, mas pode valer a pena continuar testando."
elif prob_variation_better > 0.55:
    explanation = "‚öñÔ∏è Os resultados s√£o **inconclusivos**. N√£o h√° evid√™ncia forte o suficiente para tomar uma decis√£o."
else:
    explanation = "‚ùå O controle **ainda √© a melhor op√ß√£o**. A varia√ß√£o n√£o demonstrou melhora significativa."

# Exibi√ß√£o dos resultados
st.divider()
st.subheader("üìà Resultados da An√°lise")
st.metric("RPV Controle", f"R$ {rpv_control:.2f}")
st.metric("RPV Varia√ß√£o", f"R$ {rpv_variation:.2f}")
st.metric("Probabilidade da Varia√ß√£o ser melhor", f"{prob_variation_better:.2%}")

# Exibir a explica√ß√£o do resultado
st.subheader("üìù Explica√ß√£o do Resultado")
st.info(explanation)

# Criar gr√°fico da distribui√ß√£o
fig, ax = plt.subplots(figsize=(10, 5))
ax.hist(samples_control, bins=50, alpha=0.5, label="Controle", density=True)
ax.hist(samples_variation, bins=50, alpha=0.5, label="Varia√ß√£o", density=True)
ax.axvline(rpv_control, color='blue', linestyle='dashed', linewidth=2, label="M√©dia Controle")
ax.axvline(rpv_variation, color='orange', linestyle='dashed', linewidth=2, label="M√©dia Varia√ß√£o")
ax.legend()
ax.set_title("Distribui√ß√£o Bayesiana do RPV")
ax.set_xlabel("RPV")
ax.set_ylabel("Densidade")

# Mostrar gr√°fico no Streamlit
st.pyplot(fig)
